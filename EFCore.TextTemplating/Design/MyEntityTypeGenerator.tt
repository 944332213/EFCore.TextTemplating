<#@ template inherits="MyCodeGeneratorBase" visibility="internal" linePragmas="false" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Metadata" #>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace <#= Namespace #>
{
    public partial class <#= EntityType.Name #>
    {
<#
    foreach (var property in EntityType.GetProperties().OrderBy(p => p["Scaffolding:ColumnOrdinal"]))
    {
        if (!property.IsNullable
            && (!property.ClrType.IsValueType
                || property.ClrType.IsGenericType
                && property.ClrType.GetGenericTypeDefinition() == typeof(Nullable<>))
            && !property.IsPrimaryKey())
        {
#>
        [Required]
<#
        }

        var maxLength = property.GetMaxLength();
        if (maxLength.HasValue)
        {
            if (property.ClrType == typeof(string))
            {
#>
        [StringLength(<#= Code.Literal(maxLength.Value) #>)]
<#
            }
            else
            {
#>
        [MaxLength(<#= Code.Literal(maxLength.Value) #>)]
<#
            }
        }
#>
        public <#= Code.Reference(property.ClrType) #> <#= property.Name #> { get; set; }

<#
    }

    foreach (var navigation in EntityType.GetNavigations())
    {
        var targetTypeName = navigation.GetTargetType().Name;

        if (navigation.IsCollection())
        {
#>
        public virtual ICollection<<#= targetTypeName #>> <#= navigation.Name #> { get; } = new HashSet<<#= targetTypeName #>>();

<#
        }
        else
        {
#>
        public virtual <#= targetTypeName #> <#= navigation.Name #> { get; set; }

<#
        }
    }
#>
    }
}
<#+
    // NB: T4 parameter directives aren't compatible with .NET Standard
    public IEntityType EntityType { get; private set; }
    public string Namespace { get; private set; }
    public ICSharpHelper Code { get; private set; }

    public void Initialize()
    {
        EntityType = (IEntityType)Session["EntityType"];
        Namespace = (string)Session["Namespace"];
        Code = (ICSharpHelper)Session["Code"];
    }
#>