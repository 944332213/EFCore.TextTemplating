// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace EFCore.TextTemplating.Design
{
    using System.Linq;
    using Microsoft.EntityFrameworkCore.Design;
    using Microsoft.EntityFrameworkCore.Metadata;
    using Microsoft.EntityFrameworkCore.Scaffolding;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class MyDbContextGenerator : MyCodeGeneratorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.EntityFramew" +
                    "orkCore.Metadata;\r\nusing ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write(".Configuration;\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write("\r\n{\r\n\tpublic partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ContextName));
            this.Write(" : DbContext\r\n\t{\r\n");

	foreach (var entityType in Model.GetEntityTypes())
	{

            this.Write("\t\tpublic virtual DbSet<");
            this.Write(this.ToStringHelper.ToStringWithCulture(entityType.Name));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(entityType["Scaffolding:DbSetName"]));
            this.Write(" { get; set; }\r\n");

	}

            this.Write("\r\n\t\tprotected override void OnConfiguring(DbContextOptionsBuilder options)\r\n\t\t   " +
                    " => options");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Fragment(ProviderCode.GenerateUseProvider(ConnectionString))));
            this.Write(";\r\n\r\n\t\tprotected override void OnModelCreating(ModelBuilder modelBuilder)\r\n\t\t{\r\n");

	foreach (var annotation in Model.GetAnnotations())
	{
		if (annotation.Name == "Scaffolding:DatabaseName"
			|| annotation.Name == "Scaffolding:EntityTypeErrors"
			|| annotation.Name.StartsWith(RelationalAnnotationNames.SequencePrefix)
			|| annotation.Value == null
			|| Annotation.IsHandledByConvention(Model, annotation))
		{
			continue;
		}

        var methodCall = Annotation.GenerateFluentApi(Model, annotation);
        if (methodCall != null)
        {

            this.Write("\t\t\tmodelBuilder");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Fragment(methodCall)));
            this.Write(";\r\n");

        }
		else
		{

            this.Write("\t\t\tmodelBuilder.HasAnnotation(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Literal(annotation.Name)));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.UnknownLiteral(annotation.Value)));
            this.Write(");\r\n");

		}
	}

	foreach (var entityType in Model.GetEntityTypes())
	{

            this.Write("\t\t\tmodelBuilder.ApplyConfiguration(new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(entityType.Name));
            this.Write("Configuration());\r\n");

	}

            this.Write("\t\t}\r\n\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

	// NB: T4 parameter directives aren't compatible with .NET Standard
	public IModel Model { get; private set; }
	public string Namespace { get; private set; }
	public string ContextName { get; private set; }
	public string ConnectionString { get; private set; }
	public ICSharpHelper Code { get; private set; }
	public IProviderConfigurationCodeGenerator ProviderCode { get; private set; }
	public IAnnotationCodeGenerator Annotation { get; private set; }

	public void Initialize()
	{
		Model = (IModel)Session["Model"];
		Namespace = (string)Session["Namespace"];
		ContextName = (string)Session["ContextName"];
		ConnectionString = (string)Session["ConnectionString"];
		Code = (ICSharpHelper)Session["Code"];
		ProviderCode = (IProviderConfigurationCodeGenerator)Session["ProviderCode"];
		Annotation = (IAnnotationCodeGenerator)Session["Annotation"];
	}

    }
}
