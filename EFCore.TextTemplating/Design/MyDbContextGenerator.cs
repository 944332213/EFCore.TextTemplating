// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace EFCore.TextTemplating.Design
{
    using Microsoft.EntityFrameworkCore.Design;
    using Microsoft.EntityFrameworkCore.Metadata;
    using Microsoft.EntityFrameworkCore.Scaffolding;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class MyDbContextGenerator : MyCodeGeneratorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using Microsoft.EntityFrameworkCore;\r\nusing ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNamespace));
            this.Write(";\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write("\r\n{\r\n    public partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ContextName));
            this.Write(" : DbContext\r\n    {\r\n");

    foreach (var entityType in Model.GetEntityTypes())
    {

            this.Write("        public virtual DbSet<");
            this.Write(this.ToStringHelper.ToStringWithCulture(entityType.Name));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(entityType["Scaffolding:DbSetName"]));
            this.Write(" { get; set; }\r\n");

    }

    var useProvider = ProviderCode.GenerateUseProvider(
        ConnectionString,
        ProviderCode.GenerateProviderOptions());
    var contextOptions = ProviderCode.GenerateContextOptions();
    if (contextOptions != null)
    {
        useProvider = useProvider.Chain(contextOptions);
    }

            this.Write("\r\n        protected override void OnConfiguring(DbContextOptionsBuilder options)\r" +
                    "\n            => options");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Fragment(useProvider)));
            this.Write(";\r\n\r\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n" +
                    "        {\r\n");

    foreach (var entityType in Model.GetEntityTypes())
    {

            this.Write("            modelBuilder.ApplyConfiguration(new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(entityType.Name));
            this.Write("Configuration());\r\n");

    }

            this.Write("        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

    // NB: T4 parameter directives aren't compatible with .NET Standard
    public IModel Model { get; private set; }
    public string ModelNamespace { get; private set; }
    public string Namespace { get; private set; }
    public string ContextName { get; private set; }
    public string ConnectionString { get; private set; }
    public ICSharpHelper Code { get; private set; }
    public IProviderConfigurationCodeGenerator ProviderCode { get; private set; }

    public void Initialize()
    {
        Model = (IModel)Session["Model"];
        ModelNamespace = (string)Session["ModelNamespace"];
        Namespace = (string)Session["Namespace"];
        ContextName = (string)Session["ContextName"];
        ConnectionString = (string)Session["ConnectionString"];
        Code = (ICSharpHelper)Session["Code"];
        ProviderCode = (IProviderConfigurationCodeGenerator)Session["ProviderCode"];
    }

    }
}
