<#@ template inherits="MyCodeGeneratorBase" visibility="internal" linePragmas="false" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Metadata" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Metadata.Internal" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Scaffolding" #>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace <#= Namespace #>
{
	public partial class <#= ContextName #> : DbContext
	{
<#
	foreach (var entityType in Model.GetEntityTypes())
	{
#>
		public virtual DbSet<<#= entityType.Name #>> <#= entityType.Scaffolding().DbSetName #> { get; set; }
<#
	}
#>

		protected override void OnConfiguring(DbContextOptionsBuilder options)
		    => options<#= Code.Fragment(ProviderCode.GenerateUseProvider(ConnectionString)) #>;

		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
<#
	// TODO
#>
		}
	}
}
<#+
	// TODO: Use paramater directives when compatible with .NET Core
	public IModel Model { get; private set; }
	public string Namespace { get; private set; }
	public string ContextName { get; private set; }
	public string ConnectionString { get; private set; }
	public ICSharpHelper Code { get; private set; }
	public IProviderConfigurationCodeGenerator ProviderCode { get; private set; }
	public IAnnotationCodeGenerator Annotation { get; private set; }

	public void Initialize()
	{
		Model = (IModel)Session["Model"];
		Namespace = (string)Session["Namespace"];
		ContextName = (string)Session["ContextName"];
		ConnectionString = (string)Session["ConnectionString"];
		Code = (ICSharpHelper)Session["Code"];
		ProviderCode = (IProviderConfigurationCodeGenerator)Session["ProviderCode"];
		Annotation = (IAnnotationCodeGenerator)Session["Annotation"];
	}
#>