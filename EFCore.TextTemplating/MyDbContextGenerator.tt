<#@ template inherits="MyCodeGeneratorBase" visibility="internal" linePragmas="false" #>
<#@ parameter name="Model" type="Microsoft.EntityFrameworkCore.Metadata.IModel" #>
<#@ parameter name="ModelNamespace" type="System.String" #>
<#@ parameter name="Namespace" type="System.String" #>
<#@ parameter name="ContextName" type="System.String" #>
<#@ parameter name="ConnectionString" type="System.String" #>
<#@ parameter name="SuppressConnectionStringWarning" type="System.Boolean" #>
<#@ parameter name="UseDataAnnotations" type="System.Boolean" #>
<#@ parameter name="Code" type="Microsoft.EntityFrameworkCore.Design.ICSharpHelper" #>
<#@ parameter name="ProviderCode" type="Microsoft.EntityFrameworkCore.Scaffolding.IProviderConfigurationCodeGenerator" #>
<#@ parameter name="AnnotationCode" type="Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Scaffolding" #>
using Microsoft.EntityFrameworkCore;
using <#= ModelNamespace #>;

namespace <#= Namespace #>
{
    public partial class <#= ContextName #> : DbContext
    {
<#
    foreach (var entityType in Model.GetEntityTypes())
    {
#>
        public virtual DbSet<<#= entityType.Name #>> <#= entityType["Scaffolding:DbSetName"] #> { get; set; }
<#
    }

#>

        protected override void OnConfiguring(DbContextOptionsBuilder options)
            => options<#= Code.Fragment(ProviderCode.GenerateUseProvider(ConnectionString)) #>;

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
<#
    foreach (var entityType in Model.GetEntityTypes())
    {
#>
            modelBuilder.ApplyConfiguration(new <#= entityType.Name #>Configuration());
<#
    }
#>
        }
    }
}
