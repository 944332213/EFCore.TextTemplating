// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 16.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace EFCore.TextTemplating
{
    using System.Linq;
    using Microsoft.EntityFrameworkCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class EntityEnumTypeGenerator : EFCore.TextTemplating.CodeGeneratorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNamespace));
            this.Write("\r\n{\r\n    using System.ComponentModel;\r\n\r\n");

        var enumInfo = EntityEnumInfo.Item1;
        var names = enumInfo.Name.Split('.');
        if (names.Length > 1)
        {
            foreach (var name in names.Take(names.Length - 1))
            {

            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            this.Write("\r\n    /// </summary>\r\n    public partial static class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(name));
            this.Write("\r\n    {\r\n");

            }
        }
        var entityEnumTypeComment = enumInfo.Comment;
        if (entityEnumTypeComment != null)
        {

            this.Write("\r\n    /// <summary>\r\n    /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(entityEnumTypeComment));
            this.Write("\r\n    /// </summary>\r\n    [Description(@\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(entityEnumTypeComment.Replace("\"","\"\"")));
            this.Write("\")]\r\n");

        }

        if(enumInfo.HasFlags)
        {

            this.Write("    [Flags]\r\n");

        }
        var enumTypeName = names.Last();
        var propertyClrType = EntityEnumInfo.Item2.ClrType;
        var isNullableType = propertyClrType.IsGenericType && propertyClrType.GetGenericTypeDefinition() == typeof(Nullable<>);
        var ignoreNullableType = isNullableType ? propertyClrType.GetGenericArguments()[0] : propertyClrType;
        var isInherit = ignoreNullableType == typeof(int) && ignoreNullableType != typeof(string);

            this.Write("    public enum ");
            this.Write(this.ToStringHelper.ToStringWithCulture(enumTypeName));
            this.Write(this.ToStringHelper.ToStringWithCulture(isInherit ? string.Empty : " : " + Code.Reference(ignoreNullableType)));
            this.Write("\r\n    {\r\n");

    foreach (var entityEnumValueInfo in enumInfo.Values)
    {
        var entityEnumValueComment = entityEnumValueInfo.Comment;
        if (entityEnumValueComment != null)
        {

            this.Write("        /// <summary>\r\n        /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(entityEnumValueComment));
            this.Write("\r\n        /// </summary>\r\n        [Description(@\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(entityEnumValueComment.Replace("\"","\"\"")));
            this.Write("\")]\r\n");

        }
        var value = entityEnumValueInfo.Name;
        if(entityEnumValueInfo.Value != null)
        {
            value = string.Join(" = ", value, entityEnumValueInfo.Value);
        }

            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(value));
            this.Write(",\r\n");

    }

            this.Write("    }\r\n");

        if (names.Length > 1)
        {
            for (int i = 0; i < names.Length - 1; i++)
            {

            this.Write("    }\r\n");

            }
        }

            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }

private global::System.ValueTuple<EFCore.TextTemplating.Addition.EntityEnumInfo, Microsoft.EntityFrameworkCore.Metadata.IProperty> _EntityEnumInfoField;

/// <summary>
/// Access the EntityEnumInfo parameter of the template.
/// </summary>
private global::System.ValueTuple<EFCore.TextTemplating.Addition.EntityEnumInfo, Microsoft.EntityFrameworkCore.Metadata.IProperty> EntityEnumInfo
{
    get
    {
        return this._EntityEnumInfoField;
    }
}

private string _ModelNamespaceField;

/// <summary>
/// Access the ModelNamespace parameter of the template.
/// </summary>
private string ModelNamespace
{
    get
    {
        return this._ModelNamespaceField;
    }
}

private global::Microsoft.EntityFrameworkCore.Design.ICSharpHelper _CodeField;

/// <summary>
/// Access the Code parameter of the template.
/// </summary>
private global::Microsoft.EntityFrameworkCore.Design.ICSharpHelper Code
{
    get
    {
        return this._CodeField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool EntityEnumInfoValueAcquired = false;
if (this.Session.ContainsKey("EntityEnumInfo"))
{
    this._EntityEnumInfoField = ((global::System.ValueTuple<EFCore.TextTemplating.Addition.EntityEnumInfo, Microsoft.EntityFrameworkCore.Metadata.IProperty>)(this.Session["EntityEnumInfo"]));
    EntityEnumInfoValueAcquired = true;
}
if ((EntityEnumInfoValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("EntityEnumInfo");
    if ((data != null))
    {
        this._EntityEnumInfoField = ((global::System.ValueTuple<EFCore.TextTemplating.Addition.EntityEnumInfo, Microsoft.EntityFrameworkCore.Metadata.IProperty>)(data));
    }
}
bool ModelNamespaceValueAcquired = false;
if (this.Session.ContainsKey("ModelNamespace"))
{
    this._ModelNamespaceField = ((string)(this.Session["ModelNamespace"]));
    ModelNamespaceValueAcquired = true;
}
if ((ModelNamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ModelNamespace");
    if ((data != null))
    {
        this._ModelNamespaceField = ((string)(data));
    }
}
bool CodeValueAcquired = false;
if (this.Session.ContainsKey("Code"))
{
    this._CodeField = ((global::Microsoft.EntityFrameworkCore.Design.ICSharpHelper)(this.Session["Code"]));
    CodeValueAcquired = true;
}
if ((CodeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Code");
    if ((data != null))
    {
        this._CodeField = ((global::Microsoft.EntityFrameworkCore.Design.ICSharpHelper)(data));
    }
}


    }
}


    }
}
